func Main()
    w4 = 4
    w2 = alloc(w4)
    w4 = 4
    w3 = alloc(w4)
    [w2 + 0] = w3
    w4 = @TV_Start
    [w3 + 0] = w4
    w1 = [w2 + 0]
    w1 = [w1 + 0]
    w0 = call w1(w2)
    print(w0)
    ret_ = 0
    return ret_
    
func TV_Start(this)
    root = 0
    ntb = 0
    nti = 0
    v = 0
    w8 = 28
    w6 = alloc(w8)
    w8 = 84
    w7 = alloc(w8)
    [w6 + 0] = w7
    w8 = @Tree_Delete
    [w7 + 0] = w8
    w8 = @Tree_SetHas_Left
    [w7 + 4] = w8
    w8 = @Tree_RemoveLeft
    [w7 + 8] = w8
    w8 = @Tree_GetKey
    [w7 + 12] = w8
    w8 = @Tree_SetRight
    [w7 + 16] = w8
    w8 = @Tree_GetLeft
    [w7 + 20] = w8
    w8 = @Tree_GetRight
    [w7 + 24] = w8
    w8 = @Tree_Remove
    [w7 + 28] = w8
    w8 = @Tree_SetLeft
    [w7 + 32] = w8
    w8 = @Tree_Insert
    [w7 + 36] = w8
    w8 = @Tree_accept
    [w7 + 40] = w8
    w8 = @Tree_Print
    [w7 + 44] = w8
    w8 = @Tree_Init
    [w7 + 48] = w8
    w8 = @Tree_GetHas_Right
    [w7 + 52] = w8
    w8 = @Tree_GetHas_Left
    [w7 + 56] = w8
    w8 = @Tree_RemoveRight
    [w7 + 60] = w8
    w8 = @Tree_Search
    [w7 + 64] = w8
    w8 = @Tree_SetKey
    [w7 + 68] = w8
    w8 = @Tree_Compare
    [w7 + 72] = w8
    w8 = @Tree_SetHas_Right
    [w7 + 76] = w8
    w8 = @Tree_RecPrint
    [w7 + 80] = w8
    root = w6
    w12 = root
    w11 = [w12 + 0]
    w11 = [w11 + 48]
    w13 = 16
    w10 = call w11(w12 w13)
    ntb = w10
    w18 = root
    w17 = [w18 + 0]
    w17 = [w17 + 44]
    w16 = call w17(w18)
    ntb = w16
    w21 = 100000000
    print(w21)
    w24 = root
    w23 = [w24 + 0]
    w23 = [w23 + 36]
    w25 = 8
    w22 = call w23(w24 w25)
    ntb = w22
    w30 = root
    w29 = [w30 + 0]
    w29 = [w29 + 36]
    w31 = 24
    w28 = call w29(w30 w31)
    ntb = w28
    w36 = root
    w35 = [w36 + 0]
    w35 = [w35 + 36]
    w37 = 4
    w34 = call w35(w36 w37)
    ntb = w34
    w42 = root
    w41 = [w42 + 0]
    w41 = [w41 + 36]
    w43 = 12
    w40 = call w41(w42 w43)
    ntb = w40
    w48 = root
    w47 = [w48 + 0]
    w47 = [w47 + 36]
    w49 = 20
    w46 = call w47(w48 w49)
    ntb = w46
    w54 = root
    w53 = [w54 + 0]
    w53 = [w53 + 36]
    w55 = 28
    w52 = call w53(w54 w55)
    ntb = w52
    w60 = root
    w59 = [w60 + 0]
    w59 = [w59 + 36]
    w61 = 14
    w58 = call w59(w60 w61)
    ntb = w58
    w66 = root
    w65 = [w66 + 0]
    w65 = [w65 + 44]
    w64 = call w65(w66)
    ntb = w64
    w69 = 100000000
    print(w69)
    w72 = 12
    w70 = alloc(w72)
    w72 = 4
    w71 = alloc(w72)
    [w70 + 0] = w71
    w72 = @MyVisitor_visit
    [w71 + 0] = w72
    v = w70
    w74 = 50000000
    print(w74)
    w77 = root
    w76 = [w77 + 0]
    w76 = [w76 + 40]
    w78 = v
    w75 = call w76(w77 w78)
    nti = w75
    w81 = 100000000
    print(w81)
    w84 = root
    w83 = [w84 + 0]
    w83 = [w83 + 64]
    w85 = 24
    w82 = call w83(w84 w85)
    print(w82)
    w89 = root
    w88 = [w89 + 0]
    w88 = [w88 + 64]
    w90 = 12
    w87 = call w88(w89 w90)
    print(w87)
    w94 = root
    w93 = [w94 + 0]
    w93 = [w93 + 64]
    w95 = 16
    w92 = call w93(w94 w95)
    print(w92)
    w99 = root
    w98 = [w99 + 0]
    w98 = [w98 + 64]
    w100 = 50
    w97 = call w98(w99 w100)
    print(w97)
    w104 = root
    w103 = [w104 + 0]
    w103 = [w103 + 64]
    w105 = 12
    w102 = call w103(w104 w105)
    print(w102)
    w109 = root
    w108 = [w109 + 0]
    w108 = [w108 + 0]
    w110 = 12
    w107 = call w108(w109 w110)
    ntb = w107
    w115 = root
    w114 = [w115 + 0]
    w114 = [w114 + 44]
    w113 = call w114(w115)
    ntb = w113
    w120 = root
    w119 = [w120 + 0]
    w119 = [w119 + 64]
    w121 = 12
    w118 = call w119(w120 w121)
    print(w118)
    w123 = 0
    return w123
    
func Tree_Init(this v_key)
    w124 = v_key
    [this + 24] = w124
    w126 = 0
    [this + 20] = w126
    w128 = 0
    [this + 8] = w128
    w130 = 1
    return w130
    
func Tree_SetRight(this rn)
    w131 = rn
    [this + 16] = w131
    w133 = 1
    return w133
    
func Tree_SetLeft(this ln)
    w134 = ln
    [this + 4] = w134
    w136 = 1
    return w136
    
func Tree_GetRight(this)
    w137 = [this + 16]
    return w137
    
func Tree_GetLeft(this)
    w138 = [this + 4]
    return w138
    
func Tree_GetKey(this)
    w139 = [this + 24]
    return w139
    
func Tree_SetKey(this v_key)
    w140 = v_key
    [this + 24] = w140
    w142 = 1
    return w142
    
func Tree_GetHas_Right(this)
    w143 = [this + 8]
    return w143
    
func Tree_GetHas_Left(this)
    w144 = [this + 20]
    return w144
    
func Tree_SetHas_Left(this val)
    w145 = val
    [this + 20] = w145
    w147 = 1
    return w147
    
func Tree_SetHas_Right(this val)
    w148 = val
    [this + 8] = w148
    w150 = 1
    return w150
    
func Tree_Compare(this num1 num2)
    ntb = 0
    nti = 0
    w151 = 0
    ntb = w151
    w154 = num2
    w156 = 1
    w153 = w154 + w156
    nti = w153
    w160 = num1
    w162 = num2
    w159 = w160 < w162
    if0 w159 goto else_159
    w164 = 0
    ntb = w164
    goto end_159
  else_159:
    w169 = num1
    w171 = nti
    w168 = w169 < w171
    w167 = 1
    w166 = w168 < w167
    if0 w166 goto else_166
    w173 = 0
    ntb = w173
    goto end_166
  else_166:
    w175 = 1
    ntb = w175
  end_166:
  end_159:
    w177 = ntb
    return w177
    
func Tree_Insert(this v_key)
    new_node = 0
    ntb = 0
    current_node = 0
    cont = 0
    key_aux = 0
    w180 = 28
    w178 = alloc(w180)
    w180 = 84
    w179 = alloc(w180)
    [w178 + 0] = w179
    w180 = @Tree_Delete
    [w179 + 0] = w180
    w180 = @Tree_SetHas_Left
    [w179 + 4] = w180
    w180 = @Tree_RemoveLeft
    [w179 + 8] = w180
    w180 = @Tree_GetKey
    [w179 + 12] = w180
    w180 = @Tree_SetRight
    [w179 + 16] = w180
    w180 = @Tree_GetLeft
    [w179 + 20] = w180
    w180 = @Tree_GetRight
    [w179 + 24] = w180
    w180 = @Tree_Remove
    [w179 + 28] = w180
    w180 = @Tree_SetLeft
    [w179 + 32] = w180
    w180 = @Tree_Insert
    [w179 + 36] = w180
    w180 = @Tree_accept
    [w179 + 40] = w180
    w180 = @Tree_Print
    [w179 + 44] = w180
    w180 = @Tree_Init
    [w179 + 48] = w180
    w180 = @Tree_GetHas_Right
    [w179 + 52] = w180
    w180 = @Tree_GetHas_Left
    [w179 + 56] = w180
    w180 = @Tree_RemoveRight
    [w179 + 60] = w180
    w180 = @Tree_Search
    [w179 + 64] = w180
    w180 = @Tree_SetKey
    [w179 + 68] = w180
    w180 = @Tree_Compare
    [w179 + 72] = w180
    w180 = @Tree_SetHas_Right
    [w179 + 76] = w180
    w180 = @Tree_RecPrint
    [w179 + 80] = w180
    new_node = w178
    w184 = new_node
    w183 = [w184 + 0]
    w183 = [w183 + 48]
    w185 = v_key
    w182 = call w183(w184 w185)
    ntb = w182
    w188 = this
    current_node = w188
    w190 = 1
    cont = w190
  loop_192:
    w192 = cont
    if0 w192 goto endLoop_192
    w195 = current_node
    w194 = [w195 + 0]
    w194 = [w194 + 12]
    w193 = call w194(w195)
    key_aux = w193
    w199 = v_key
    w201 = key_aux
    w198 = w199 < w201
    if0 w198 goto else_198
    w205 = current_node
    w204 = [w205 + 0]
    w204 = [w204 + 56]
    w203 = call w204(w205)
    if0 w203 goto else_203
    w209 = current_node
    w208 = [w209 + 0]
    w208 = [w208 + 20]
    w207 = call w208(w209)
    current_node = w207
    goto end_203
  else_203:
    w212 = 0
    cont = w212
    w216 = current_node
    w215 = [w216 + 0]
    w215 = [w215 + 4]
    w217 = 1
    w214 = call w215(w216 w217)
    ntb = w214
    w222 = current_node
    w221 = [w222 + 0]
    w221 = [w221 + 32]
    w223 = new_node
    w220 = call w221(w222 w223)
    ntb = w220
  end_203:
    goto end_198
  else_198:
    w228 = current_node
    w227 = [w228 + 0]
    w227 = [w227 + 52]
    w226 = call w227(w228)
    if0 w226 goto else_226
    w232 = current_node
    w231 = [w232 + 0]
    w231 = [w231 + 24]
    w230 = call w231(w232)
    current_node = w230
    goto end_226
  else_226:
    w235 = 0
    cont = w235
    w239 = current_node
    w238 = [w239 + 0]
    w238 = [w238 + 76]
    w240 = 1
    w237 = call w238(w239 w240)
    ntb = w237
    w245 = current_node
    w244 = [w245 + 0]
    w244 = [w244 + 16]
    w246 = new_node
    w243 = call w244(w245 w246)
    ntb = w243
  end_226:
  end_198:
    goto loop_192
  endLoop_192:
    w249 = 1
    return w249
    
func Tree_Delete(this v_key)
    current_node = 0
    parent_node = 0
    cont = 0
    found = 0
    ntb = 0
    is_root = 0
    key_aux = 0
    w250 = this
    current_node = w250
    w252 = this
    parent_node = w252
    w254 = 1
    cont = w254
    w256 = 0
    found = w256
    w258 = 1
    is_root = w258
  loop_260:
    w260 = cont
    if0 w260 goto endLoop_260
    w263 = current_node
    w262 = [w263 + 0]
    w262 = [w262 + 12]
    w261 = call w262(w263)
    key_aux = w261
    w267 = v_key
    w269 = key_aux
    w266 = w267 < w269
    if0 w266 goto else_266
    w273 = current_node
    w272 = [w273 + 0]
    w272 = [w272 + 56]
    w271 = call w272(w273)
    if0 w271 goto else_271
    w275 = current_node
    parent_node = w275
    w279 = current_node
    w278 = [w279 + 0]
    w278 = [w278 + 20]
    w277 = call w278(w279)
    current_node = w277
    goto end_271
  else_271:
    w282 = 0
    cont = w282
  end_271:
    goto end_266
  else_266:
    w285 = key_aux
    w287 = v_key
    w284 = w285 < w287
    if0 w284 goto else_284
    w291 = current_node
    w290 = [w291 + 0]
    w290 = [w290 + 52]
    w289 = call w290(w291)
    if0 w289 goto else_289
    w293 = current_node
    parent_node = w293
    w297 = current_node
    w296 = [w297 + 0]
    w296 = [w296 + 24]
    w295 = call w296(w297)
    current_node = w295
    goto end_289
  else_289:
    w300 = 0
    cont = w300
  end_289:
    goto end_284
  else_284:
    w302 = is_root
    if0 w302 goto else_302
    w308 = current_node
    w307 = [w308 + 0]
    w307 = [w307 + 52]
    w306 = call w307(w308)
    w305 = 1
    w304 = w306 < w305
    w314 = current_node
    w313 = [w314 + 0]
    w313 = [w313 + 56]
    w312 = call w313(w314)
    w311 = 1
    w310 = w312 < w311
    w303 = w304 * w310
    if0 w303 goto else_303
    w317 = 1
    ntb = w317
    goto end_303
  else_303:
    w321 = this
    w320 = [w321 + 0]
    w320 = [w320 + 28]
    w322 = parent_node
    w323 = current_node
    w319 = call w320(w321 w322 w323)
    ntb = w319
  end_303:
    goto end_302
  else_302:
    w328 = this
    w327 = [w328 + 0]
    w327 = [w327 + 28]
    w329 = parent_node
    w330 = current_node
    w326 = call w327(w328 w329 w330)
    ntb = w326
  end_302:
    w333 = 1
    found = w333
    w335 = 0
    cont = w335
  end_284:
  end_266:
    w337 = 0
    is_root = w337
    goto loop_260
  endLoop_260:
    w339 = found
    return w339
    
func Tree_Remove(this p_node c_node)
    ntb = 0
    auxkey1 = 0
    auxkey2 = 0
    w342 = c_node
    w341 = [w342 + 0]
    w341 = [w341 + 56]
    w340 = call w341(w342)
    if0 w340 goto else_340
    w346 = this
    w345 = [w346 + 0]
    w345 = [w345 + 8]
    w347 = p_node
    w348 = c_node
    w344 = call w345(w346 w347 w348)
    ntb = w344
    goto end_340
  else_340:
    w353 = c_node
    w352 = [w353 + 0]
    w352 = [w352 + 52]
    w351 = call w352(w353)
    if0 w351 goto else_351
    w357 = this
    w356 = [w357 + 0]
    w356 = [w356 + 60]
    w358 = p_node
    w359 = c_node
    w355 = call w356(w357 w358 w359)
    ntb = w355
    goto end_351
  else_351:
    w364 = c_node
    w363 = [w364 + 0]
    w363 = [w363 + 12]
    w362 = call w363(w364)
    auxkey1 = w362
    w371 = p_node
    w370 = [w371 + 0]
    w370 = [w370 + 20]
    w369 = call w370(w371)
    w368 = [w369 + 0]
    w368 = [w368 + 12]
    w367 = call w368(w369)
    auxkey2 = w367
    w377 = this
    w376 = [w377 + 0]
    w376 = [w376 + 72]
    w378 = auxkey1
    w379 = auxkey2
    w375 = call w376(w377 w378 w379)
    if0 w375 goto else_375
    w383 = p_node
    w382 = [w383 + 0]
    w382 = [w382 + 32]
    w384 = [this + 12]
    w381 = call w382(w383 w384)
    ntb = w381
    w389 = p_node
    w388 = [w389 + 0]
    w388 = [w388 + 4]
    w390 = 0
    w387 = call w388(w389 w390)
    ntb = w387
    goto end_375
  else_375:
    w395 = p_node
    w394 = [w395 + 0]
    w394 = [w394 + 16]
    w396 = [this + 12]
    w393 = call w394(w395 w396)
    ntb = w393
    w401 = p_node
    w400 = [w401 + 0]
    w400 = [w400 + 76]
    w402 = 0
    w399 = call w400(w401 w402)
    ntb = w399
  end_375:
  end_351:
  end_340:
    w405 = 1
    return w405
    
func Tree_RemoveRight(this p_node c_node)
    ntb = 0
  loop_406:
    w408 = c_node
    w407 = [w408 + 0]
    w407 = [w407 + 52]
    w406 = call w407(w408)
    if0 w406 goto endLoop_406
    w412 = c_node
    w411 = [w412 + 0]
    w411 = [w411 + 68]
    w417 = c_node
    w416 = [w417 + 0]
    w416 = [w416 + 24]
    w415 = call w416(w417)
    w414 = [w415 + 0]
    w414 = [w414 + 12]
    w413 = call w414(w415)
    w410 = call w411(w412 w413)
    ntb = w410
    w422 = c_node
    p_node = w422
    w426 = c_node
    w425 = [w426 + 0]
    w425 = [w425 + 24]
    w424 = call w425(w426)
    c_node = w424
    goto loop_406
  endLoop_406:
    w431 = p_node
    w430 = [w431 + 0]
    w430 = [w430 + 16]
    w432 = [this + 12]
    w429 = call w430(w431 w432)
    ntb = w429
    w437 = p_node
    w436 = [w437 + 0]
    w436 = [w436 + 76]
    w438 = 0
    w435 = call w436(w437 w438)
    ntb = w435
    w441 = 1
    return w441
    
func Tree_RemoveLeft(this p_node c_node)
    ntb = 0
  loop_442:
    w444 = c_node
    w443 = [w444 + 0]
    w443 = [w443 + 56]
    w442 = call w443(w444)
    if0 w442 goto endLoop_442
    w448 = c_node
    w447 = [w448 + 0]
    w447 = [w447 + 68]
    w453 = c_node
    w452 = [w453 + 0]
    w452 = [w452 + 20]
    w451 = call w452(w453)
    w450 = [w451 + 0]
    w450 = [w450 + 12]
    w449 = call w450(w451)
    w446 = call w447(w448 w449)
    ntb = w446
    w458 = c_node
    p_node = w458
    w462 = c_node
    w461 = [w462 + 0]
    w461 = [w461 + 20]
    w460 = call w461(w462)
    c_node = w460
    goto loop_442
  endLoop_442:
    w467 = p_node
    w466 = [w467 + 0]
    w466 = [w466 + 32]
    w468 = [this + 12]
    w465 = call w466(w467 w468)
    ntb = w465
    w473 = p_node
    w472 = [w473 + 0]
    w472 = [w472 + 4]
    w474 = 0
    w471 = call w472(w473 w474)
    ntb = w471
    w477 = 1
    return w477
    
func Tree_Search(this v_key)
    current_node = 0
    ifound = 0
    cont = 0
    key_aux = 0
    w478 = this
    current_node = w478
    w480 = 1
    cont = w480
    w482 = 0
    ifound = w482
  loop_484:
    w484 = cont
    if0 w484 goto endLoop_484
    w487 = current_node
    w486 = [w487 + 0]
    w486 = [w486 + 12]
    w485 = call w486(w487)
    key_aux = w485
    w491 = v_key
    w493 = key_aux
    w490 = w491 < w493
    if0 w490 goto else_490
    w497 = current_node
    w496 = [w497 + 0]
    w496 = [w496 + 56]
    w495 = call w496(w497)
    if0 w495 goto else_495
    w501 = current_node
    w500 = [w501 + 0]
    w500 = [w500 + 20]
    w499 = call w500(w501)
    current_node = w499
    goto end_495
  else_495:
    w504 = 0
    cont = w504
  end_495:
    goto end_490
  else_490:
    w507 = key_aux
    w509 = v_key
    w506 = w507 < w509
    if0 w506 goto else_506
    w513 = current_node
    w512 = [w513 + 0]
    w512 = [w512 + 52]
    w511 = call w512(w513)
    if0 w511 goto else_511
    w517 = current_node
    w516 = [w517 + 0]
    w516 = [w516 + 24]
    w515 = call w516(w517)
    current_node = w515
    goto end_511
  else_511:
    w520 = 0
    cont = w520
  end_511:
    goto end_506
  else_506:
    w522 = 1
    ifound = w522
    w524 = 0
    cont = w524
  end_506:
  end_490:
    goto loop_484
  endLoop_484:
    w526 = ifound
    return w526
    
func Tree_Print(this)
    ntb = 0
    current_node = 0
    w527 = this
    current_node = w527
    w531 = this
    w530 = [w531 + 0]
    w530 = [w530 + 80]
    w532 = current_node
    w529 = call w530(w531 w532)
    ntb = w529
    w535 = 1
    return w535
    
func Tree_RecPrint(this node)
    ntb = 0
    w538 = node
    w537 = [w538 + 0]
    w537 = [w537 + 56]
    w536 = call w537(w538)
    if0 w536 goto else_536
    w542 = this
    w541 = [w542 + 0]
    w541 = [w541 + 80]
    w545 = node
    w544 = [w545 + 0]
    w544 = [w544 + 20]
    w543 = call w544(w545)
    w540 = call w541(w542 w543)
    ntb = w540
    goto end_536
  else_536:
    w549 = 1
    ntb = w549
  end_536:
    w553 = node
    w552 = [w553 + 0]
    w552 = [w552 + 12]
    w551 = call w552(w553)
    print(w551)
    w557 = node
    w556 = [w557 + 0]
    w556 = [w556 + 52]
    w555 = call w556(w557)
    if0 w555 goto else_555
    w561 = this
    w560 = [w561 + 0]
    w560 = [w560 + 80]
    w564 = node
    w563 = [w564 + 0]
    w563 = [w563 + 24]
    w562 = call w563(w564)
    w559 = call w560(w561 w562)
    ntb = w559
    goto end_555
  else_555:
    w568 = 1
    ntb = w568
  end_555:
    w570 = 1
    return w570
    
func Tree_accept(this v)
    nti = 0
    w571 = 333
    print(w571)
    w574 = v
    w573 = [w574 + 0]
    w573 = [w573 + 0]
    w575 = this
    w572 = call w573(w574 w575)
    nti = w572
    w578 = 0
    return w578
    
func Visitor_visit(this n)
    nti = 0
    w581 = n
    w580 = [w581 + 0]
    w580 = [w580 + 52]
    w579 = call w580(w581)
    if0 w579 goto else_579
    w585 = n
    w584 = [w585 + 0]
    w584 = [w584 + 24]
    w583 = call w584(w585)
    [this + 4] = w583
    w590 = [this + 4]
    w589 = [w590 + 0]
    w589 = [w589 + 40]
    w591 = this
    w588 = call w589(w590 w591)
    nti = w588
    goto end_579
  else_579:
    w594 = 0
    nti = w594
  end_579:
    w598 = n
    w597 = [w598 + 0]
    w597 = [w597 + 56]
    w596 = call w597(w598)
    if0 w596 goto else_596
    w602 = n
    w601 = [w602 + 0]
    w601 = [w601 + 20]
    w600 = call w601(w602)
    [this + 8] = w600
    w607 = [this + 8]
    w606 = [w607 + 0]
    w606 = [w606 + 40]
    w608 = this
    w605 = call w606(w607 w608)
    nti = w605
    goto end_596
  else_596:
    w611 = 0
    nti = w611
  end_596:
    w613 = 0
    return w613
    
func MyVisitor_visit(this n)
    nti = 0
    w616 = n
    w615 = [w616 + 0]
    w615 = [w615 + 52]
    w614 = call w615(w616)
    if0 w614 goto else_614
    w620 = n
    w619 = [w620 + 0]
    w619 = [w619 + 24]
    w618 = call w619(w620)
    [this + 4] = w618
    w625 = [this + 4]
    w624 = [w625 + 0]
    w624 = [w624 + 40]
    w626 = this
    w623 = call w624(w625 w626)
    nti = w623
    goto end_614
  else_614:
    w629 = 0
    nti = w629
  end_614:
    w633 = n
    w632 = [w633 + 0]
    w632 = [w632 + 12]
    w631 = call w632(w633)
    print(w631)
    w637 = n
    w636 = [w637 + 0]
    w636 = [w636 + 56]
    w635 = call w636(w637)
    if0 w635 goto else_635
    w641 = n
    w640 = [w641 + 0]
    w640 = [w640 + 20]
    w639 = call w640(w641)
    [this + 8] = w639
    w646 = [this + 8]
    w645 = [w646 + 0]
    w645 = [w645 + 40]
    w647 = this
    w644 = call w645(w646 w647)
    nti = w644
    goto end_635
  else_635:
    w650 = 0
    nti = w650
  end_635:
    w652 = 0
    return w652
    
